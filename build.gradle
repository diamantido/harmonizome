// Gradle version 7.0

buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.7.0'
        classpath 'com.github.node-gradle:gradle-node-plugin:3.4.0'
    }
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'com.github.node-gradle.node'
apply plugin: 'com.bmuschko.tomcat'

group = 'edu.mssm.pharm.maayanlab.Harmonizome'
description = 'Harmonizome'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

dependencies {
  def tomcatVersion = '8.5.16'
  tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
        // "org.apache.tomcat.embed:tomcat-embed-logging-juli:8.5.2",
        "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"

  implementation group: 'org.apache.tomcat', name: 'tomcat-jdbc', version:"${tomcatVersion}"
  implementation group: 'javax.servlet', name: 'jstl', version:'1.2'
  implementation group: 'org.apache.commons', name: 'commons-lang3', version:'3.4'
  implementation group: 'org.apache.httpcomponents', name: 'httpclient', version:'4.5.2'
  implementation group: 'mysql', name: 'mysql-connector-java', version:'8.0.31'
  implementation group: 'org.hibernate', name: 'hibernate-core', version:'4.1.8.Final'
  implementation 'com.github.MaayanLab.common:common-database:master-SNAPSHOT'
  implementation group: 'org.hibernate', name: 'hibernate-c3p0', version:'3.6.3.Final'
  implementation group: 'javax.mail', name: 'mail', version:'1.5.0-b01'
  implementation group: 'org.json', name: 'json', version: '20230618'
  testImplementation group: 'junit', name: 'junit', version:'4.12'
  testImplementation group: 'org.mockito', name: 'mockito-all', version:'1.10.8'
  providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version:'3.0.1'
  providedCompile group: 'javax.servlet.jsp', name: 'jsp-api', version:'2.2'
}

// Capture system properties
ext {
    HARMONIZOME_PREFIX = project.findProperty("HARMONIZOME_PREFIX") ?: "Harmonizome"
    TOMCAT_PORT = project.findProperty("TOMCAT_PORT") ?: "8080"
    DB_URL = project.findProperty("DB_URL") ?: "jdbc:mysql://localhost/harmonizome"
    DB_USER = project.findProperty("DB_USER") ?: "harmonizome"
    DB_PASS = project.findProperty("DB_PASS") ?: "harmonizome"
}

def webappDir = "${project.projectDir}/src/main/webapp/"

node {
  download = true
  nodeModulesDir = file(webappDir)
}

task prepareNpm(type: NpmTask) {
    inputs.file("${webappDir}/package.json")
    outputs.dir("${webappDir}/node_modules")
    args = [ "install" ]
}

task buildProject(type: NpmTask) {
    inputs.file("${webappDir}/gruntfile.js")
    inputs.files fileTree(webappDir).include('**/*.js').include('**/*.css').exclude('dist/**').exclude('lib/**').exclude('node_modules/**')
    outputs.dir("${webappDir}/dist")
    dependsOn prepareNpm
    args = [ "run", "build" ]
}

war.dependsOn buildProject

// Make system properties available to our tests
test {
    useTestNG()
    systemProperties System.properties
}

tomcat {
    httpProtocol = 'org.apache.coyote.http11.Http11Nio2Protocol'
    ajpProtocol  = 'org.apache.coyote.ajp.AjpNio2Protocol'

    httpPort = "${TOMCAT_PORT}".toInteger()
    contextPath = "${HARMONIZOME_PREFIX}"
}

task createConstantProperties(type: WriteProperties) {
    File constPropFile = file('src/main/resources/constant.properties')
    project.logger.info('Creating constant.properties')
    property('HARMONIZOME_PREFIX', "${HARMONIZOME_PREFIX}")
    setOutputFile(constPropFile)
    writeProperties()
}

// We create hibernate properties from the environment to get the database working at runtime
task createHibernateProperties(type: WriteProperties) {
    File hibernatePropFile = file('src/main/resources/hibernate.properties')
    project.logger.info('Creating hibernate.properties')
    property('hibernate.connection.username', "${DB_USER}")
    property('hibernate.connection.password', "${DB_PASS}")
    property('hibernate.connection.url', "${DB_URL}")
    setOutputFile(hibernatePropFile)
    writeProperties()
}

processResources.dependsOn createHibernateProperties

// We don't want local properties in the deployment(s)
war {
  rootSpec.exclude '**/constant.properties'
  rootSpec.exclude '**/hibernate.properties'
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
  exclude '**/constant.properties'
  exclude '**/hibernate.properties'
}

artifacts {
  archives sourcesJar
}
